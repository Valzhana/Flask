# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
# üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å
# –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å, –æ–±–Ω–æ–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Task —Å –ø–æ–ª—è–º–∏ id, title, description –∏ status.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ tasks –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (–º–µ—Ç–æ–¥ GET).
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ POST).
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ PUT).
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ DELETE).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.

from typing import Optional
import uvicorn
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

tasks = []


class Task(BaseModel):
    id: int
    title: str
    description: Optional[str]
    status: str


class TaskIn(BaseModel):
    title: str
    description: Optional[str]
    status: str


# @app.get("/")
# async def root():
#     return {"message": "Hello world!"}


@app.get("/tasks/", response_model=list[Task])
async def root():
    return tasks


@app.post("/tasks/", response_model=list[Task])
async def create_task(new_task: TaskIn):
    tasks.append(Task(id=len(tasks) + 1, title=new_task.title,
                      description=new_task.description,
                      status=new_task.status
                      ))
    return tasks


@app.put("/tasks/", response_model=Task)
async def edit_task(task_id: int, new_task: TaskIn):
    for i in range(0, len(tasks)):
        if tasks[i].id == task_id:
            current_task = tasks[task_id - 1]
            current_task.title = new_task.title
            current_task.description = new_task.description
            current_task.status = new_task.status
            return current_task
    raise HTTPException(status_code=404, detail="Task not found")


@app.delete("/tasks/", response_model=dict)
async def delete_task(task_id: int):
    for i in range(0, len(tasks)):
        if tasks[i].id == task_id:
            tasks.remove(tasks[i])
            return {"message": "Task was deleted"}
    raise HTTPException(status_code=404, detail="Task not found")


if __name__ == '__main__':
    uvicorn.run(
        "task_1:app",
        host="127.0.0.1",
        port=8000,
        reload=True
    )
